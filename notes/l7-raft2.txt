Fast backup:
- Log reconcilliation can potentially involve erasing/overwriting the entirety of the log
    - e.g. one of the followers never receives the append entries messages
- To reconcile logs, the master must find the point the latest entry in the follower's log which
    with their own log
- A naive strategy is to decrement the master's nextIndex entry for the follower until a consistent 
    log entry is found
- This can involve a lot of RPC calls if the follower has many inconsistent logs
- We can optimise log reconciliation by augmenting the append entries RPC reply with:
    - the term of the conflicting entry
    - the index of the conflicting entry
    - the length of the follower's log

Persistent state:
- Used for reboots
- For single failures, we could completely reconstruct the state using log reconciliation
- Persistent state is used to guard against simultaneous failures (e.g. power outage)
- A node persists three things:
    - the (entire) log (to reconstruct state)
    - the current term (in case the logs don't contain entries for terms that have passed)
    - the node it voted for in the current term (to stop double votes on reboot)
- The state is not actually persisted. It is reconstructed from the log (c.f. event sourcing)
- Writing to disk is expensive (~10ms) -- they're likely to be the limiting factor for performance
    - SSD (~0.1ms)
    - Battery backed DRAM
- We can potentially batch persistent operations by observing that we only need to persist things when 
    we respond to an extern request
- Use fsync to flush to disk

Volatile state:
- can be reconstructed from a node's own persistent state and append entry replies from other nodes

Snapshots and log compaction:
- Optimisation to circumvent having to replay the entire log to reconstruct state
- Save the application state as at a known log entry
- Application state tends to be smaller than the log
- Log entries before the specificied log entry are discarded
- This can cause issues if the discarded log entries are needed to reconcile logs with a follower
- The master will send the snapshot rather than the logs in this situation

Correctness:
- Lineaerizability:
    - Informally - the behavior you would expect from a non-replicated service
    - Execution history is linearizable if there is a total order of operations 
        that matches realtime for non-concurrent requests AND
    - Each read sees the most recent write according to that order