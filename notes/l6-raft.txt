Split brain:
- two servers think they are the masters
- typically caused by network partition

Techniques to address split brain:
- Build networks that are (almost) resistant to network partition. 
    This typically involves carefully physical setups of servers
- Human intervention to manually designate a master
- (!) Majority vote

Majority (quorum) vote:
- Odd number of servers
- Majority is required to progress e.g. elect a leader, commit a log entry
- There cannot be more than one partition with a majority
- Majority means majority of all servers -- not just a majority of the live servers
- 2f + 1 servers can survive f failures
- Any two majorities has a minimum overlap of 1 server
- For consecutive majorities, this means that information from the previous majority is persisted e.g. Raft term number
- Paxos and view stamp replication were early majority vote systems

Raft:
1. Client sends request to application
2. Application send request to Raft layer
3. Master raft layer sends append entries requests to the Raft layers of replicas
4. Application executes operations once Raft receives successful responses from majority
5. Replicas execute operations once Master sends next append entries request
    Alternatively, could be a separate commit message -- implementation detail
    Depends on traffic frequency

- The raft log:
    - Is persisted to non-volatile memory
    - Mechanism for master to orchestrate replicas
    - Assigns an index to all operations (linearizes concurrent operations)
    - Can be replayed to recreate state after a crash
    - Can transiently differ in its uncommitted entries

Leader election:
- Leaders are not strictly necessary for majority systems
- Leader systems reduce network traffic
- Each term has <= 1 leader
- Elections are initiated by any server after it has not heard from the current leader
- Elections may be called even if there is a viable leader in the current term
- Only the leader can send an append entries message
- An append entries message is sent to assert leadership by causing other servers to reset their timeouts
- It is possible for an election to have no winners if there are 3 candidates
- Raft uses randomized timeouts to reduce the probability of multiple candidates in a single election
    - This works because the first candidate will typically win the election since non-candidates vote for the first candidate that contacts them
    - A larger timeout range reduces the probabibility of split Elections
    - Longer timeouts cause recoveries to be slower 
    - The 'expected' gap between the timeout should be at least the round trip time between servers
    - This timeout should be refreshed every time the timeout is reset
    - Using a static timeout could cause repeated failed elections if two servers unluckily choose the same timeout
