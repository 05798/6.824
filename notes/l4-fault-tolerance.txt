- Fail-stop - doesn't continue generating incorrect results. Either stops or continues generating valid results
- Replication only helps with fail stops not bugs
- Replication assumes failures are independent e.g. faulty chips on both computers
- Replication is costly

- Two types of replication:
-- State transfer: primary sends the entire state to the backup
-- Replicated state machines: external events e.g. network events are sent to backup. 
    Assumption is that both primary and backup behavior is internal state is deterministic.
    Only the external events would cause a divergence in internal state
- Replicated state machines results in less network usage sine state transfer usually involves transferring entire contents of RAM
- Replicated state machines are more complicated and rely on the assumptions outlined above
- Replicated state machines tend to be less robust -- especially for multi core machines

Main questions:
- What state to transfer
- How to sync primary and backup
- Cut-over strategies that reduce observable anomalies. It is not possible to make the fault unobservable to outsider observers.
- How to spawn a new replica when a fault occurs (need state transfer)

What state to transfer?
- Tend to only replicate application level state
- This means the application must have replication logic built in
- Application level replication tends to be more performant since it can selectively choose what state to transfer
- Some replication schemes replicate at a lower level e.g. registers/RAM which makes it application agnostic

Non-deterministic events:
- Input from external sources e.g. network data + interrupt. Interrupt timing is critical
- Non deterministic instructions e.g. get time of day
- Multiple cores -- instructions are interleaved in a non-determinstic way

Log entry has:
- Instruction number (i.e. the number of instructions since boot)
- Type e.g. network request
- Data e.g. network data

Special CPU support to fake interrupts in backup machine
Backup cannot frontrun the primary

Output rule -- primary can only respond to requests if backup acknowledges log channel entries

Backup must consume all log entries before cutover

It is (basically) impossible to design systems that are guaranteed not to generate duplicate output. 
TCP/IP clients can filter duplicate packets generated by replication system  

Split brain if primary/backup can't communicate
External test and set server decides which server is the primary due to network partition
